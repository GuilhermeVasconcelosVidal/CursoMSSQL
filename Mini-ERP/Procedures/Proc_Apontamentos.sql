--PROCEDURE PRODUÇÃO
--GERA MOVIMENTO DE ENTRADA ESTOQUE DO PRODUTO APONTADO
--GERA MOVIMENTO DE SAIDA ESTOQUE DOS PRODUTOS CONSUMIDOS CONFORME FICHA TECNICA
--ALIEMENTA TABELA CONSUMO PARA RASTREABILIDADE
--ALIMENTA TABELA APONTAMENTO PARA RASTREABILIDADE
--ATUALIZA TABELAS ORDEM_PROD QTD_PROD E SITUACAO=F FINALIZADO, QUANDO QTD_PLAN=QTD_PROD
--PARAMETROS, COD_EMPRESA, ID_ORDEM, COD_MAT_PROD,QTD_APONT, LOTE
--CONSISTENCIAS DE ESTOQUE
--ORDEM_PROD SITUACAO= A NAO GEROU PEDIDO DE COMPRAS
--ORDEM_PROD SITUACAO= P GEROU PEDIDO DE COMPRAS
--ORDEM_PROD SITUACAO= F FINALIZADA
--FASE 8 INTEGRACAO APONTAMENTOS PRODUCAO ESTOQUE
--EXEC PROC_APONTAMENTO 1,1,10,TESTE1
--DROP PROCEDURE PROC_APONTAMENTO
  
  CREATE PROCEDURE PROC_APONTAMENTO (@COD_EMPRESA INT,
                                     @ID_ORDEM INT,
									 @COD_MAT_PROD INT,
									 @QTD_APON DECIMAL(10,2),
									 @LOTE_PROD VARCHAR(20)) 
  AS
  BEGIN
  

  DECLARE @APONTAMENTO TABLE
  (
     ID_APON INT
   )

  DECLARE
          
		  @QTD_PLAN DECIMAL(10,2),
		  @QTD_PROD DECIMAL(10,2),
		  @SALDO DECIMAL(10,2),
		  @SALDO_AUX DECIMAL(10,2),
		  @SITUACAO VARCHAR(1),
		  @ERRO_INTERNO INT,
		  @DATA_MOVTO DATE,
		  @ID_APON INT,
		  @COD_MAT_NECES INT,
		  @QTD_ATEND DECIMAL(10,2),
		  @QTD_LOTE DECIMAL(10,2),
		  @TESTE INT,
		  @COD_MAT_AUX INT,
		  @QTD_NECES_CONS DECIMAL(10,2),
		  @LOTE VARCHAR(20),
		  @QTD_NECES DECIMAL(10,2)
  
  SET @DATA_MOVTO=GETDATE()
  
  BEGIN TRANSACTION
--PRIMEIRA ETAPA APONTAMENTO ATUALIZA ORDEM E MOVIMENTA ESTOQUE
--PRIMEIRO IF CHECK DE EXISTE ORDEM PARA SELECAO
  IF (SELECT COUNT(*)
      FROM ORDEM_PROD A
	  WHERE COD_EMPRESA=@COD_EMPRESA
	  AND A.COD_MAT_PROD=@COD_MAT_PROD
	  AND A.ID_ORDEM=@ID_ORDEM
	  AND A.SITUACAO='P')= 0 --APENAS ORDEM PLANEJADAS
	  BEGIN
	   SET @ERRO_INTERNO= 1
	       PRINT 'ERRO1'
      END
--VERIFICANDO QTD APONTADA > SALDO PARA NAO  PERMITIR APONTAMENTO
  ELSE IF (SELECT A.QTD_PLAN-A.QTD_PROD
           FROM ORDEM_PROD A
		   WHERE COD_EMPRESA=@COD_EMPRESA
		   AND A.ID_ORDEM=@ID_ORDEM)< @QTD_APON
		   BEGIN
		     SET @ERRO_INTERNO=2
			 PRINT 'ERRO2'
           END
--VERIFICANDO SE MATERIAIS NECESSARIOS TEM SALDO PARA CONSUMO
  ELSE IF (SELECT COUNT(*)
      --SELECT B.COD_MAT_NECES, B.QTD_NECES*@QTD_APON NECESSIDADE, C.QTD_SALDO
	       FROM ORDEM_PROD A
		   INNER JOIN FICHA_TECNICA B
		   ON A.COD_EMPRESA=@B.COD_EMPRESA
		   AND A.COD_MAT_PROD=B.COD_MAT_PROD
		   INNER JOIN ESTOQUE C
		   ON A.COD_EMPRESA=C.COD_EMPRESA
		   AND B.COD_MAT_NECES=C.COD_MAT
		   WHERE A.COD_EMPRESA=@COD_EMPRESA
		   AND A.ID_ORDEM=@ID_ORDEM
		   AND (B.QTD_NECES*@QTD_APON)>C.QTD_SALDO)>0
		   BEGIN
		     SET @ERRO_INTERNO= 3
			   PRINT 'ERRO3'
           END
  ELSE 
  BEGIN 

  BEGIN TRY
  --DECLARANDO CURSOR DE APONTAMENTO
    DECLARE APONT CURSOR FOR
    --SELECIONANDO VALORES
	SELECT A.ID_ORDEM,A.COD_MAT_PROD,A.QTD_PLAN,A.QTD_PROD
	FROM ORDEM_PROD A
	WHERE A.COD_EMPRESA=@COD_EMPRESA
	AND A.COD_MAT_PROD=@COD_MAT_PROD
	AND ID_ORDEM=@ID_ORDEM
	AND A.SITUACAO= 'P' --APENAS ORDEM PLANEJADAS
--ABRINDO CURSOR APONT
  OPEN APONT
  --LENDO REGISTRO
  FETCH NEXT FROM APONT
  --INSERINDO VALORES NAS VARIAVEIS
  INTO @ID_ORDEM,@COD_MAT_PROD,@QTD_PLAN,@QTD_PROD
  WHILE @@FETCH_STATUS= 0
     BEGIN
	 --APENAS APRESENTANDO INFORMACOES
	 SELECT @ID_ORDEM ID_ORDEM, @COD_MAT_PROD COD_MAT_PROD,@QTD_PLAN QTD_PLAN,
	        @QTD_PROD QTD_PROD, @QTD_PLAN-@QTD_PROD SALDO
	 SELECT 'QTD APONTADA ', @QTD_APON;
	 SELECT 'SALDO ORDEM ',  @QTD_PLAN-(@QTD_PROD+@QTD_APON);
	 --ATRIBUINDO VALORES
	 SET @SALDO=@QTD_PLAN-@QTD_PROD
	 SET @SALDO_AUX=@SALDO
	   

	  --INSERT NA TABELA APONTAMENTOS PARA RASTREABILIDADE
	    INSERT INTO APONTAMENTOS
		OUTPUT INSERTED.ID_APON INTO @APONTAMENTO
		VALUES (@COD_EMPRESA,@ID_ORDEM,@COD_MAT_PROD,@QTD_APON, GETDATE(), SYSTEM_USER,@LOTE_PROD)